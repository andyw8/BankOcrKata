#!/usr/bin/ruby -wKU

TO_DIGIT = {
  " _ " +
  "| |" +
  "|_|" => "0",
  "   " +
  "  |" +
  "  |" => "1",
  " _ " +
  " _|" +
  "|_ " => "2",
  " _ " +
  " _|" +
  " _|" => "3",
  "   " +
  "|_|" +
  "  |" => "4",
  " _ " +
  "|_ " +
  " _|" => "5",
  " _ " +
  "|_ " +
  "|_|" => "6",
  " _ " +
  "  |" +
  "  |" => "7",
  " _ " +
  "|_|" +
  "|_|" => "8",
  " _ " +
  "|_|" +
  " _|" => "9",
}

def read_line
  (line = gets) ? line.chomp.ljust(9*3) : nil
end

def read_scanned_number
  lines = [read_line, read_line, read_line]
  return nil if lines.any? { |ln| ln.nil? }
  gets
  tops, mids, bots = lines.map { |str| str.scan(/.../) }
  tops.zip(mids, bots).map { |sc| sc.join }
end

def value_of(snum)
  snum.map { |sc| TO_DIGIT[sc] || "?" }.join
end

def check?(account_number)
  sum = account_number.chars.to_a.reverse.
    zip((1..9).to_a).inject(0) { |acc, (ch, mul)| acc + ch.to_i * mul }
  (sum % 11) == 0
end

def one_away(scanned_char)
  possiblities = TO_DIGIT.keys.map { |sc|
    [sc.chars.zip(scanned_char.chars).map { |a,b| a == b }.count(false), sc]
  }
  possiblities.select { |delta, sc| delta == 1 }.map { |delta, sc| sc }
end

def alternatives(snum)
  result = []
  prefix = []
  suffix = snum.dup
  while ! suffix.empty?
    sch = suffix.shift
    one_away(sch).each do |alt_ch|
      alt_num = value_of(prefix + [alt_ch] + suffix)
      result << alt_num if alt_num !~ /[?]/ && check?(alt_num)
    end
    prefix.push(sch)
  end
  result.sort
end

while snum = read_scanned_number
  num = value_of(snum)
  if num !~ /[?]/ && check?(num)
    puts num
  else
    alt_nums = alternatives(snum)
    if alt_nums.size == 1
      puts alt_nums.first
    elsif alt_nums.size > 1
      puts "#{num} AMB [#{alt_nums.map { |an| "'#{an}'" }.join(", ")}]"
    elsif num =~ /[?]/
      puts "#{num} ILL"
    else
      puts "#{num} ERR"
    end
  end
end
